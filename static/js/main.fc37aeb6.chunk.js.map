{"version":3,"sources":["serviceWorker.js","Components/CounterButton.js","Components/Header.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","CounterButton","updateCount","setState","count","nextProps","nextState","this","color","props","onClick","Component","Header","className","Card","name","email","id","src","alt","CardList","robots","map","user","i","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","height","children","ErrorBoundry","hasError","info","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fc37aeb6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n    constructor() {\n        super();\n        this.state = {\n            count: 0\n        }\n    }\n    \n    shouldComponentUpdate(nextProps, nextState) {\n        if(this.state.count!== nextState.count){\n            return true;\n        }\n        return true;\n    }\n\n    updateCount = () => {\n        this.setState(state =>  ({count: state.count+1})) //recommended \n    }\n    \n    render() {\n        return (\n            <button color={this.props.color} onClick={this.updateCount}>count: {this.state.count} </button>\n        );\n    }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n    \n    render() {\n        return (\n            <div>\n                <h1 className='f1'>RoboFriends</h1>\n                <CounterButton color={'red'} />\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\n\n\nconst Card = ({name, email, id}) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?size=200x200`}  alt=\"ph\"/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({robots}) => {\n    return (\n        <div>\n            {robots===0 && <div>loading...</div>}\n            {robots.map((user, i) => {\n                return <Card \n                id={robots[i].id} \n                name={robots[i].name}\n                email={robots[i].email}\n                key={i}\n                />\n            })}\n        </div>\n    )\n}\n\n\nexport default CardList;","import React from 'react';\n\n\nconst SearchBox = ({searchChange}) => {\n    return(\n        <div className='pa2'>\n            <input \n            aria-label='Search Robots'\n            className='pa3 ba b--green bg-lightest-blue' \n            type='search' \n            placeholder='search robots'\n            onChange={searchChange} />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', height: '700px'}}>\n            {props.children}\n        </div>\n        );\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true});\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Something went wrong.</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Header from '../Components/Header'\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\nimport './App.css';\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundry from '../Components/ErrorBoundry';\nimport {setSearchField, requestRobots} from '../actions'\n\nexport class App extends Component {\n\n    componentDidMount(){\n        this.props.onRequestRobots();\n    }\n\n    render(){\n        const {searchField, onSearchChange, robots, isPending} = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        return isPending\n        ?<h1>Loading</h1>\n        :(\n            <div className='tc'>\n                \n                <Header />\n                <SearchBox searchChange={onSearchChange} />\n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList robots={filteredRobots} />\n                    </ErrorBoundry>\n                </Scroll>\n                \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots()) // requestRobots(dispatch)\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type:REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS,payload: data}))\n        .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload: error}));\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED } from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: '',\n}\n\nexport const searchRobots = (state=initialStateSearch, action={})=>{\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n            // return Object.assign({}, state, {searchField: action.payload})\n            return {...state, searchField: action.payload}\n        default:\n            return state;\n\n    }\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {...state, isPending:true}\n        case REQUEST_ROBOTS_SUCCESS:\n            return {...state, robots:action.payload, isPending:false}\n        case REQUEST_ROBOTS_FAILED:\n            return {...state, robots:action.payload, isPending:false}\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\n// import {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport App from './Containers/App';\nimport {searchRobots, requestRobots} from './reducers';\nimport 'tachyons';\n\n\n// const logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware)); //logger after\n\n\n\nReactDOM.render(<Provider store={store}>\n                    <App />\n                </Provider>, document.getElementById('root'));\n\nserviceWorker.register();\n\n "],"sourceRoot":""}